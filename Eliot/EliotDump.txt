

// === .\Cortex.cpp ===
//./Eliot/Cortex.cpp
#include "Cortex.h"
#include <cstdio>
#include <string>
#include <cuda_runtime.h>
#include <vector>
#include <cstdlib>

Neuron* allocateNeurons(const int cortex_number, int neuron_count, int input_neurons) {
    Neuron* h_neurons = new Neuron[neuron_count];

	//initialize each neuron

    for (int i = 0; i < neuron_count; ++i) {
        h_neurons[i].num_links = 0;
        h_neurons[i].link_table = nullptr;
        h_neurons[i].threshold = (float) rand() / RAND_MAX;
        h_neurons[i].last_output = 0.0f;
        h_neurons[i].is_recursive = (rand() / (float)RAND_MAX) < 0.1f;
        h_neurons[i].is_input = (i < input_neurons);
        // future: give an is_output flag to neurons who link to more than their cortex
        h_neurons[i].is_negative = (rand() / (float)RAND_MAX) < 0.25f;
        h_neurons[i].id.cortex_id = cortex_number;
        h_neurons[i].id.neuron_index = i;
    }

	// Create link Tables for each neuron

    for (int i = 0; i < neuron_count; ++i) {
        int link = 1;

        // Input channel link (only one, always first)
        if (h_neurons[i].is_input) {
			// Create a link to the input channel
			// The input channel is represented by a negative cortex ID oposite of the current cortex
			// This is a convention to differentiate input channels from regular neurons
			// input channel index is equal to the neuron index
			h_neurons[i].link_table[link] = LinkWeight(NeuronID(-cortex_number, i, true), (rand() / RAND_MAX) * 2.0f - 1.0f);
			++link;
        }

        // Recursive link to self
        if (h_neurons[i].is_recursive) {
			h_neurons[i].link_table[link] = LinkWeight(h_neurons[i].id, (rand() / RAND_MAX) * 2.0f - 1.0f);
			++link;
        }

        // Random links to other neurons
        for (int j = 0; j < neuron_count; ++j) {
            if (j == i) continue;
            if ((rand() / (float)RAND_MAX) < 0.1f) {
				h_neurons[i].link_table[link] = LinkWeight(h_neurons[j].id, (rand() / RAND_MAX) * 2.0f - 1.0f);
				++link;
            }
        }

		// Assign the number of links to the neuron
        h_neurons[i].num_links = link;
		cudaHostAlloc((void**)&h_neurons[i].link_table, sizeof(LinkWeight) * link, cudaHostAllocMapped);
    }

    return h_neurons;
}

// === .\Cortex.cuh ===
//./Eliot/Cortex.cuh
#pragma once

#include "Cortex.h"
#include "Neuron.h"



// === .\Cortex.h ===
//./Eliot/Cortex.h
#pragma once

#include "Neuron.h"
#include "Neuron.cuh"
#include <cuda_runtime.h>
#include <cstdio>
#include <string>

Neuron* allocateNeurons(const int cortex_number, int neuron_count, int input_neurons);

struct Cortex {
	Neuron* neurons;  // Pointer to an array of Neurons
	int neuron_count; // Total number of neurons in the cortex
	int input_neurons; // Number of input neurons
	int num; // Identifier for the cortex

	Cortex(const int cortex_number, int neuron_count, int input_neurons)
		: neuron_count(neuron_count), input_neurons(input_neurons), num(cortex_number) {
		neurons = allocateNeurons(cortex_number, neuron_count, input_neurons);
	}
	~Cortex() {
		delete[] neurons; // Free allocated memory for neurons
	}
};  

// === .\Neuron.cu ===
ï»¿//./Eliot/Neuron.cu
#include "Neuron.cuh"
#include <iostream>

__global__ void scream(Neuron* neurons, float* inputs, int total_neurons, int input_count) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= total_neurons) return;

    Neuron& n = neurons[idx];
    float sum = 0.0f;

	// Calculate the weighted sum of all links
    for (int i = 0; i < n.num_links; ++i) {
        LinkWeight& link = n.link_table[i];
        if (link.target_id.is_input) {
            sum += link.weight * inputs[n.id.neuron_index];
        }
        else {
            // grab neuron output via link table
            for (int i = 0; i < total_neurons; ++i) {
                if (link.target_id.cortex_id == neurons[i].id.cortex_id && link.target_id.neuron_index == neurons[i].id.neuron_index) {
					sum += link.weight * neurons[i].last_output;
                }
            }
        }
    }

    if (n.is_negative) {
        n.last_output = (sum <= n.threshold) ? -1.0f : 0.0f;
    } 
    else {
        n.last_output = (sum >= n.threshold) ? 1.0f : 0.0f;
    }
}

__global__ void adapt(Neuron* neurons, float* inputs, int neuron_count, float learn_rate) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx >= neuron_count) return;
    Neuron& n = neurons[idx];

	float history = n.last_output;

    for (int i = 0; i < n.num_links; ++i) {
        LinkWeight& link = n.link_table[i];
        for (int i = 0; i < neuron_count; ++i) {
            if (link.target_id.cortex_id == neurons[i].id.cortex_id && link.target_id.neuron_index == neurons[i].id.neuron_index) {
                if (link.target_id.is_input) {
                    // Adjust input link weights based on input
                    link.weight += (n.is_negative) ? -learn_rate * inputs[link.target_id.neuron_index] * history : learn_rate * inputs[link.target_id.neuron_index] * history; // Adjust weight based on input
                } else {
                    // Adjust output link weights based on last output
                    link.weight += (n.is_negative) ? -learn_rate * neurons[i].last_output * history : learn_rate * neurons[i].last_output * history; // Adjust weight based on last output
                }
            }
        }
	}

    //adjust threshold based on last output
    if (history != 0.0f) {
        n.threshold += (n.is_negative) ? -learn_rate : learn_rate; // Increase threshold if neuron fired to prevent it from firing too easily
    }
    else {
        n.threshold += (n.is_negative) ? learn_rate : -learn_rate; // Decrease threshold if neuron did not fire to make it more sensitive
    }

}

// === .\Neuron.h ===
#pragma once

struct NeuronID {
    int cortex_id;  // Unique identifier for the cortex
    int neuron_index;  // Index of the neuron within the cortex
    bool is_input; // Flag to indicate if this is an inputID, for input channels

#if defined(__CUDACC__)
    __host__ __device__
#endif
        NeuronID(int cortex = 0, int index = 0, bool input = false)
        :cortex_id(cortex), neuron_index(index), is_input(input) {
    }
};

struct LinkWeight {
	NeuronID target_id;  // NeuronID of the target neuron
	float weight; // Weight of the link

#if defined(__CUDACC__)
    __host__ __device__
#endif
    LinkWeight(const NeuronID target = NeuronID(), float w = 0.0f)
		: weight(w), target_id(target) {
	}
};

struct Neuron {
    float threshold;
    float last_output;

    LinkWeight* link_table;  // Array of LinkWeight
    int num_links;

    bool is_input;
    bool is_recursive;
    bool is_negative;

    NeuronID id;  // Unique neuron identifier

#if defined(__CUDACC__)
    __host__ __device__
#endif
    Neuron()
        : threshold(0.5f), last_output(0.0f),
        link_table(nullptr), num_links(0),
        is_input(false), is_recursive(false), is_negative(false) {
    }
};
